package com.outr.net

import org.powerscala.enum.{Enumerated, EnumEntry}

/**
 * @author Matt Hicks <matt@outr.com>
 */
case class Protocol private(scheme: String, description: String, rfc: String) extends EnumEntry {
  override def toString() = scheme
}

object Protocol extends Enumerated[Protocol] {
  val Aaa = new Protocol("aaa", "Diameter Protocol	", "RFC6733")
  val Aaas = new Protocol("aaas", "Diameter Protocol with Secure Transport	", "RFC6733")
  val About = new Protocol("about", "about	", "RFC6694")
  val Acap = new Protocol("acap", "application configuration access protocol	", "RFC2244")
  val Acct = new Protocol("acct", "acct	", "RFC-ietf-appsawg-acct-uri-06")
  val Cap = new Protocol("cap", "Calendar Access Protocol	", "RFC4324")
  val Cid = new Protocol("cid", "content identifier	", "RFC2392")
  val Coap = new Protocol("coap", "coap	", "RFC-ietf-core-coap-18")
  val Coaps = new Protocol("coaps", "coaps	", "RFC-ietf-core-coap-18")
  val Crid = new Protocol("crid", "TV-Anytime Content Reference Identifier	", "RFC4078")
  val Data = new Protocol("data", "data	", "RFC2397")
  val Dav = new Protocol("dav", "dav	", "RFC4918")
  val Dict = new Protocol("dict", "dictionary service protocol	", "RFC2229")
  val Dns = new Protocol("dns", "Domain Name System	", "RFC4501")
  val File = new Protocol("file", "Host-specific file names	", "RFC1738")
  val Ftp = new Protocol("ftp", "File Transfer Protocol	", "RFC1738")
  val Geo = new Protocol("geo", "Geographic Locations	", "RFC5870")
  val Go = new Protocol("go", "go	", "RFC3368")
  val Gopher = new Protocol("gopher", "The Gopher Protocol	", "RFC4266")
  val H323 = new Protocol("h323", "H.323	", "RFC3508")
  val Http = new Protocol("http", "Hypertext Transfer Protocol	", "RFC2616")
  val Https = new Protocol("https", "Hypertext Transfer Protocol Secure	", "RFC2818")
  val Iax = new Protocol("iax", "Inter-Asterisk eXchange Version 2	", "RFC5456")
  val Icap = new Protocol("icap", "Internet Content Adaptation Protocol	", "RFC3507")
  val Im = new Protocol("im", "Instant Messaging	", "RFC3860")
  val Imap = new Protocol("imap", "internet message access protocol	", "RFC5092")
  val Info = new Protocol("info", "Information Assets with Identifiers in Public Namespaces	", "RFC4452")
  val Ipp = new Protocol("ipp", "Internet Printing Protocol	", "RFC3510")
  val Iris = new Protocol("iris", "Internet Registry Information Service	", "RFC3981")
  val IrisBeep = new Protocol("iris.beep", "iris.beep	", "RFC3983")
  val IrisXpc = new Protocol("iris.xpc", "iris.xpc	", "RFC4992")
  val IrisXpcs = new Protocol("iris.xpcs", "iris.xpcs	", "RFC4992")
  val IrisLwz = new Protocol("iris.lwz", "iris.lwz	", "RFC4993")
  val Jabber = new Protocol("jabber", "jabber", "Saint-Andre")
  val JarFile = new Protocol("jar:file", "JAR File", "JAR")
  val Ldap = new Protocol("ldap", "Lightweight Directory Access Protocol", "RFC4516")
  val Mailto = new Protocol("mailto", "Electronic mail address	", "RFC6068")
  val Mid = new Protocol("mid", "message identifier	", "RFC2392")
  val Msrp = new Protocol("msrp", "Message Session Relay Protocol	", "RFC4975")
  val Msrps = new Protocol("msrps", "Message Session Relay Protocol Secure	", "RFC4975")
  val Mtqp = new Protocol("mtqp", "Message Tracking Query Protocol	", "RFC3887")
  val Mupdate = new Protocol("mupdate", "Mailbox Update (MUPDATE) Protocol	", "RFC3656")
  val News = new Protocol("news", "USENET news	", "RFC5538")
  val Nfs = new Protocol("nfs", "network file system protocol	", "RFC2224")
  val Ni = new Protocol("ni", "ni	", "RFC6920")
  val Nih = new Protocol("nih", "nih	", "RFC6920")
  val Nntp = new Protocol("nntp", "USENET news using NNTP access	", "RFC5538")
  val Opaquelocktoken = new Protocol("opaquelocktoken", "opaquelocktokent	", "RFC4918")
  val Pop = new Protocol("pop", "Post Office Protocol v3	", "RFC2384")
  val Pres = new Protocol("pres", "Presence	", "RFC3859")
  val Reload = new Protocol("reload", "reload", "draft-ietf-p2psip-base-26")
  val Rtsp = new Protocol("rtsp", "real time streaming protocol	", "RFC2326")
  val Service = new Protocol("service", "service location	", "RFC2609")
  val Session = new Protocol("session", "session	", "RFC6787")
  val Shttp = new Protocol("shttp", "Secure Hypertext Transfer Protocol	", "RFC2660")
  val Sieve = new Protocol("sieve", "ManageSieve Protocol	", "RFC5804")
  val Sip = new Protocol("sip", "session initiation protocol	", "RFC3261")
  val Sips = new Protocol("sips", "secure session initiation protocol	", "RFC3261")
  val Sms = new Protocol("sms", "Short Message Service	", "RFC5724")
  val Snmp = new Protocol("snmp", "Simple Network Management Protocol	", "RFC4088")
  val SoapBeep = new Protocol("soap.beep", "soap.beep	", "RFC4227")
  val SoapBeeps = new Protocol("soap.beeps", "soap.beeps	", "RFC4227")
  val Tag = new Protocol("tag", "tag	", "RFC4151")
  val Tel = new Protocol("tel", "telephone	", "RFC3966")
  val Telnet = new Protocol("telnet", "Reference to interactive sessions	", "RFC4248")
  val Tftp = new Protocol("tftp", "Trivial File Transfer Protocol	", "RFC3617")
  val Thismessage = new Protocol("thismessage", "perm/thismessage	multipart/related relative reference resolution	", "RFC2557")
  val Tn3270 = new Protocol("tn3270", "Interactive 3270 emulation sessions	", "RFC6270")
  val Tip = new Protocol("tip", "Transaction Internet Protocol	", "RFC2371")
  val Tv = new Protocol("tv", "TV Broadcasts	", "RFC2838")
  val Urn = new Protocol("urn", "Uniform Resource Names	", "RFC2141][IANA registry urn-namespaces")
  val Vemmi = new Protocol("vemmi", "versatile multimedia interface	", "RFC2122")
  val Ws = new Protocol("ws", "WebSocket connections	", "RFC6455")
  val Wss = new Protocol("wss", "Encrypted WebSocket connections	", "RFC6455")
  val Xcon = new Protocol("xcon", "xcon	", "RFC6501")
  val XconUserid = new Protocol("xcon-userid", "xcon-userid	", "RFC6501")
  val XmlrpcBeep = new Protocol("xmlrpc.beep", "xmlrpc.beep	", "RFC3529")
  val XmlrpcBeeps = new Protocol("xmlrpc.beeps", "xmlrpc.beeps	", "RFC3529")
  val Xmpp = new Protocol("xmpp", "Extensible Messaging and Presence Protocol	", "RFC5122")
  val Z3950r = new Protocol("z39.50r", "Z39.50 Retrieval	", "RFC2056")
  val Z3950s = new Protocol("z39.50s", "Z39.50 Session	", "RFC2056")

  private lazy val schemes = values.map(p => p.scheme -> p).toMap

  def byScheme(scheme: String) = schemes(scheme.toLowerCase)
  def getByScheme(scheme: String) = schemes.get(scheme.toLowerCase)
}
